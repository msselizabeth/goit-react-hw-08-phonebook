{"version":3,"file":"static/js/750.a483b5c6.chunk.js","mappings":"iQAEaA,EAAOC,EAAAA,GAAAA,GAAH,uI,mBCAJC,EAAoB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClC,OACE,kBAAMA,SAAUA,EAAhB,WACE,qCAEE,kBAAOC,KAAK,OAAOC,KAAK,aAE1B,uCAEE,kBAAOD,KAAK,OAAOC,KAAK,eAE1B,mBAAQD,KAAK,SAAb,sBAGL,E,UCbKE,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAEtBC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,EAEvBC,EAAc,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAnB,EAEnBC,GAAwBC,EAAAA,EAAAA,IAC5B,CAACT,ECVuB,SAAAC,GAAK,OAAIA,EAAMS,MAAV,IDW7B,SAACR,EAAUQ,GACT,cAAOR,QAAP,IAAOA,OAAP,EAAOA,EAAUQ,QAAO,qBAAGX,KACpBY,cAAcC,SAASF,EAAOC,cADb,GAGzB,IEPUE,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAkCC,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAsCF,EAAAA,EAAAA,WAAS,GAA/C,eAAOG,EAAP,KAAoBC,EAApB,KACMC,GAAkBC,EAAAA,EAAAA,IAAYd,IAEpCe,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,SAAAC,GAAC,MAAe,WAAXA,EAAEC,MAAqBN,GAAe,EAA1C,EAGpB,OAFAO,OAAOC,iBAAiB,UAAWJ,GAE5B,WACLG,OAAOE,oBAAoB,UAAWL,EACvC,CACF,IAuCD,OACE,iCACE,SAAC9B,EAAD,UACG2B,GACCA,EAAgBS,KAAI,YAA2B,IAAxBC,EAAuB,EAAvBA,GAAIhC,EAAmB,EAAnBA,KAAMiC,EAAa,EAAbA,OAC/B,OACE,2BACE,kCAAUjC,MACV,iCAASiC,MACT,SAACC,EAAA,EAAD,CAAQnC,KAAK,SAASoC,QAAS,kBA9CxB,SAAAH,GACnBb,EAAaa,GACbX,GAAe,EAChB,CA2CkDe,CAAaJ,EAAnB,EAA/B,qBAGA,SAACE,EAAA,EAAD,CAAQG,QAAQ,WACdtC,KAAK,SACLoC,QAAS,kBAAMpB,GAASuB,EAAAA,EAAAA,IAAcN,GAA7B,EAFX,sBANOA,EAcZ,OAEL,SAACO,EAAA,EAAD,CAAOC,KAAMpB,EAAaqB,QA1BV,WAClBpB,GAAe,EAChB,EAwBG,UACE,+BACE,SAACxB,EAAD,CAAmBC,SAxDN,SAAA4C,GACnBA,EAAIC,iBAEJ,IAAMC,EAAOF,EAAIG,cAMjB,GALqBvB,EAAgBwB,MACnC,SAAAC,GAAO,OACLA,EAAQ/C,KAAKY,gBAAkBgC,EAAKI,SAAShD,KAAKiD,MAAMrC,aADnD,IAKP,OAAOsC,MAAM,6CAEf5B,EAAgB6B,SAAQ,YAA2B,IAAxBnB,EAAuB,EAAvBA,GAAIhC,EAAmB,EAAnBA,KAAMiC,EAAa,EAAbA,OAC/BD,IAAOd,GACTH,GACEqC,EAAAA,EAAAA,IAAc,CACZpB,GAAId,EACJlB,KAAM4C,EAAKI,SAAShD,KAAKiD,OAASjD,EAClCiC,OAAQW,EAAKI,SAASf,OAAOgB,OAAShB,IAI7C,IAEDW,EAAKS,QACLhC,GAAe,EAChB,UAmCF,ECvFYiC,EAAO1D,EAAAA,GAAAA,KAAH,sSAUf,ICHW2D,EAAiB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACzBzC,GAAWC,EAAAA,EAAAA,MACXb,GAAWoB,EAAAA,EAAAA,IAAYtB,GAuB7B,OACE,UAACqD,EAAD,CAAMxD,SAtBa,SAAA4C,GACnBA,EAAIC,iBACJ,IAAMC,EAAOF,EAAIG,cAMjB,GALqB1C,EAAS2C,MAC5B,SAAAC,GAAO,OACLA,EAAQ/C,KAAKY,gBAAkBgC,EAAKI,SAAShD,KAAKiD,MAAMrC,aADnD,IAKP,OAAOsC,MAAM,6CAEfnC,GACE0C,EAAAA,EAAAA,IAAW,CACTzD,KAAM4C,EAAKI,SAAShD,KAAKiD,MACzBhB,OAAQW,EAAKI,SAASf,OAAOgB,SAGjCO,IACAZ,EAAKS,OACN,EAGC,WACE,sCAEE,kBACEtD,KAAK,OACLC,KAAK,OACL0D,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,wCAEE,kBACE7D,KAAK,MACLC,KAAK,SACL0D,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,SAAC1B,EAAA,EAAD,CAAQ2B,KAAK,QAAQxB,QAAQ,YAAYtC,KAAK,SAA9C,2BAGL,E,6BCvDY+D,EAAS,WACpB,IAAM/C,GAAWC,EAAAA,EAAAA,MAMjB,OACE,UAAC+C,EAAA,EAAD,oCAEE,SAACC,EAAA,EAAD,CAAOjE,KAAK,OAAOkE,SAPG,SAAAvB,GACxB3B,GAASmD,EAAAA,EAAAA,IAAexB,EAAIG,cAAcI,OAC3C,MAQF,ECiCD,EAzCiB,WACf,IAAMlC,GAAWC,EAAAA,EAAAA,MACXV,GAAYiB,EAAAA,EAAAA,IAAYlB,GACxBG,GAAQe,EAAAA,EAAAA,IAAYhB,GAC1B,GAAsCU,EAAAA,EAAAA,WAAS,GAA/C,eAAOG,EAAP,KAAoBC,EAApB,MAEAG,EAAAA,EAAAA,YAAU,WACRT,GAASoD,EAAAA,EAAAA,MACV,GAAE,CAACpD,KAEJS,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,SAAAC,GAAC,MAAe,WAAXA,EAAEC,MAAqBN,GAAe,EAA1C,EAGpB,OAFAO,OAAOC,iBAAiB,UAAWJ,GAE5B,WACLG,OAAOE,oBAAoB,UAAWL,EACvC,CACF,IAED,IAAM2C,EAAc,WAClB/C,GAAe,EAChB,EAED,OACE,iCACE,SAACa,EAAA,EAAD,CAAQ2B,KAAK,QAAQxB,QAAQ,YAAYtC,KAAK,SAASoC,QAAS,kBAAMd,GAAe,EAArB,EAAhE,8BAGA,sCACA,SAACyC,EAAD,IACCtD,IAAS,uBAAIA,EAAM6D,UACnB/D,GAAY,uCAAoB,SAACQ,EAAD,KACjC,SAACyB,EAAA,EAAD,CAAOC,KAAMpB,EAAaqB,QAAS2B,EAAnC,UACE,+BACE,SAACb,EAAD,CAAgBC,cAAeY,UAKxC,C","sources":["components/ContactList/ContactList.styled.js","components/UpdateContactForm/UpdateContactForm.js","redux/contacts/selectors.js","redux/filter/selectors.js","components/ContactList/ContactList.js","components/AddContactForm/AddContactForm.styled.js","components/AddContactForm/AddContactForm.js","components/Filter/Filter.js","pages/Contact.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\nmargin-top:15px;\nwidth: 350px;\npadding: 10px;\nbox-shadow: 0px 0px 5px 1px palevioletred;\nfont-size: 25px;\n`","import PropTypes from 'prop-types';\n\nexport const UpdateContactForm = ({ onSubmit }) => {\n  return (\n    <form onSubmit={onSubmit}>\n      <label>\n        Name\n        <input type=\"text\" name=\"name\" />\n      </label>\n      <label>\n        Number\n        <input type=\"text\" name=\"number\" />\n      </label>\n      <button type=\"submit\">Update</button>\n    </form>\n  );\n};\n\nUpdateContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilterValue } from 'redux/filter/selectors';\n\nconst selectContacts = state => state.contacts.items;\n\nconst selectIsLoading = state => state.contacts.isLoading;\n\nconst selectError = state => state.contacts.error;\n\nconst selectVisibleContacts = createSelector(\n  [selectContacts, selectFilterValue],\n  (contacts, filter) => {\n    return contacts?.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n\nexport { selectContacts, selectIsLoading, selectError, selectVisibleContacts };","const selectFilterValue = state => state.filter;\n\nexport { selectFilterValue };\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, Modal } from '@mui/material';\nimport {List} from './ContactList.styled'\nimport { deleteContact, updateContact } from 'redux/contacts/operations';\nimport { UpdateContactForm } from 'components/UpdateContactForm/UpdateContactForm';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const [contactId, setContactId] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  useEffect(() => {\n    const onKeyClose = e => e.code === 'Escape' && setIsModalOpen(false);\n    window.addEventListener('keydown', onKeyClose);\n\n    return () => {\n      window.removeEventListener('keydown', onKeyClose);\n    };\n  });\n\n  const handleUpdate = id => {\n    setContactId(id);\n    setIsModalOpen(true);\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const form = evt.currentTarget;\n    const isInContacts = visibleContacts.find(\n      contact =>\n        contact.name.toLowerCase() === form.elements.name.value.toLowerCase()\n    );\n\n    if (isInContacts)\n      return alert('This contact is already in your contacts.');\n\n    visibleContacts.forEach(({ id, name, number }) => {\n      if (id === contactId) {\n        dispatch(\n          updateContact({\n            id: contactId,\n            name: form.elements.name.value || name,\n            number: form.elements.number.value || number,\n          })\n        );\n      }\n    });\n\n    form.reset();\n    setIsModalOpen(false);\n  };\n\n  const handleClose = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <>\n      <List>\n        {visibleContacts &&\n          visibleContacts.map(({ id, name, number }) => {\n            return (\n              <li key={id}>\n                <p>Name: {name}</p>\n                <p>Tel: {number}</p>\n                <Button type=\"button\" onClick={() => handleUpdate(id)}>\n                  Update\n                </Button>\n                <Button variant=\"outlined\"\n                  type=\"button\"\n                  onClick={() => dispatch(deleteContact(id))}\n                >\n                  Delete\n                </Button>\n              </li>\n            );\n          })}\n      </List>\n      <Modal open={isModalOpen} onClose={handleClose}>\n        <>\n          <UpdateContactForm onSubmit={handleSubmit} />\n        </>\n      </Modal>\n    </>\n  );\n};","import styled from 'styled-components';\n\nexport const Form = styled.form`\nposition:absolute;\ntop: 25%;\nleft:25%;\ndisplay: flex;\nflex-direction:column;\njustify-content: center;\nalign-items: center;\ngap: 15px;\n margin: 0 auto;\n${'' /* margin-top:100px; */}\npadding: 15px;\n\nbackground-color: white;\nwidth:300px;\nborder: 2px solid grey;\nborder-radius:10px;\n\n`","\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport {Form} from './AddContactForm.styled'\nimport { Button } from '@mui/material';\n\n\nexport const AddContactForm = ({ closeOnSubmit }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.currentTarget;\n    const isInContacts = contacts.find(\n      contact =>\n        contact.name.toLowerCase() === form.elements.name.value.toLowerCase()\n    );\n\n    if (isInContacts)\n      return alert('This contact is already in your contacts.');\n\n    dispatch(\n      addContact({\n        name: form.elements.name.value,\n        number: form.elements.number.value,\n      })\n    );\n    closeOnSubmit();\n    form.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <label>\n        Name: \n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label>\n        Number: \n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <Button size=\"small\" variant=\"contained\" type=\"submit\">Add contact</Button>\n    </Form>\n  );\n};\n\nAddContactForm.propTypes = {\n  closeOnSubmit: PropTypes.func.isRequired,\n};","import { FormLabel, Input} from '@mui/material';\nimport { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/filter/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilterInput = evt => {\n    dispatch(filterContacts(evt.currentTarget.value));\n  };\n\n  return (\n    <FormLabel>\n      Find contact by name: \n      <Input type=\"text\" onChange={handleFilterInput} />\n    </FormLabel>\n  );\n};","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, Modal } from '@mui/material';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { AddContactForm } from '../components/AddContactForm/AddContactForm';\nimport { Filter } from '../components/Filter/Filter';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  useEffect(() => {\n    const onKeyClose = e => e.code === 'Escape' && setIsModalOpen(false);\n    window.addEventListener('keydown', onKeyClose);\n\n    return () => {\n      window.removeEventListener('keydown', onKeyClose);\n    };\n  });\n\n  const handleClose = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <>\n      <Button size=\"small\" variant=\"contained\" type=\"button\" onClick={() => setIsModalOpen(true)}>\n        Add new contact\n      </Button>\n      <h2>Contacts</h2>\n      <Filter />\n      {error && <p>{error.massage}</p>}\n      {isLoading ? <p>Loading...</p> : <ContactList />}\n      <Modal open={isModalOpen} onClose={handleClose}>\n        <>\n          <AddContactForm closeOnSubmit={handleClose} />\n        </>\n      </Modal>\n    </>\n  );\n};\n\nexport default Contacts;"],"names":["List","styled","UpdateContactForm","onSubmit","type","name","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filter","toLowerCase","includes","ContactList","dispatch","useDispatch","useState","contactId","setContactId","isModalOpen","setIsModalOpen","visibleContacts","useSelector","useEffect","onKeyClose","e","code","window","addEventListener","removeEventListener","map","id","number","Button","onClick","handleUpdate","variant","deleteContact","Modal","open","onClose","evt","preventDefault","form","currentTarget","find","contact","elements","value","alert","forEach","updateContact","reset","Form","AddContactForm","closeOnSubmit","addContact","pattern","title","required","size","Filter","FormLabel","Input","onChange","filterContacts","fetchContacts","handleClose","massage"],"sourceRoot":""}